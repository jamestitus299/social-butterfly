{"version":3,"names":["path","require","ACTIONS","GET_VERSION","GET_TYPES_INFO","GET_VISITOR_KEYS","GET_TOKEN_LABELS","MAYBE_PARSE","MAYBE_PARSE_SYNC","_send","WeakMap","_vCache","_tiCache","_vkCache","_tlCache","Client","constructor","send","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","getVersion","_classPrivateFieldGet2","_classPrivateFieldGet","call","undefined","getTypesInfo","_classPrivateFieldGet3","getVisitorKeys","_classPrivateFieldGet4","getTokLabels","_classPrivateFieldGet5","maybeParse","code","options","exports","WorkerClient","_worker","_class","action","payload","signal","Int32Array","SharedArrayBuffer","subChannel","_classStaticPrivateFieldSpecGet","_worker_threads","MessageChannel","postMessage","port","port1","Atomics","wait","message","receiveMessageOnPort","port2","error","Object","assign","errorData","result","Worker","resolve","__dirname","env","SHARE_ENV","unref","get","_get_worker_threads","set","_worker_threads_cache","_classStaticPrivateFi2","_classStaticPrivateFieldSpecSet","_class2","_handleMessage","LocalClient","_classStaticPrivateFi"],"sources":["../src/client.cjs"],"sourcesContent":["const path = require(\"path\");\n\nconst ACTIONS = {\n  GET_VERSION: \"GET_VERSION\",\n  GET_TYPES_INFO: \"GET_TYPES_INFO\",\n  GET_VISITOR_KEYS: \"GET_VISITOR_KEYS\",\n  GET_TOKEN_LABELS: \"GET_TOKEN_LABELS\",\n  MAYBE_PARSE: \"MAYBE_PARSE\",\n  MAYBE_PARSE_SYNC: \"MAYBE_PARSE_SYNC\",\n};\n\nclass Client {\n  #send;\n\n  constructor(send) {\n    this.#send = send;\n  }\n\n  #vCache;\n  getVersion() {\n    return (this.#vCache ??= this.#send(ACTIONS.GET_VERSION, undefined));\n  }\n\n  #tiCache;\n  getTypesInfo() {\n    return (this.#tiCache ??= this.#send(ACTIONS.GET_TYPES_INFO, undefined));\n  }\n\n  #vkCache;\n  getVisitorKeys() {\n    return (this.#vkCache ??= this.#send(ACTIONS.GET_VISITOR_KEYS, undefined));\n  }\n\n  #tlCache;\n  getTokLabels() {\n    return (this.#tlCache ??= this.#send(ACTIONS.GET_TOKEN_LABELS, undefined));\n  }\n\n  maybeParse(code, options) {\n    return this.#send(ACTIONS.MAYBE_PARSE, { code, options });\n  }\n}\n\n// We need to run Babel in a worker for two reasons:\n// 1. ESLint workers must be CJS files, and this is a problem\n//    since Babel 8+ uses native ESM\n// 2. ESLint parsers must run synchronously, but many steps\n//    of Babel's config loading (which is done for each file)\n//    can be asynchronous\n// If ESLint starts supporting async parsers, we can move\n// everything back to the main thread.\nexports.WorkerClient = class WorkerClient extends Client {\n  static #worker_threads_cache;\n  static get #worker_threads() {\n    return (WorkerClient.#worker_threads_cache ??= require(\"worker_threads\"));\n  }\n\n  #worker = new WorkerClient.#worker_threads